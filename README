README

This repository contains all code written to support the manuscript "The Chthonomonas calidirosea genome 
is highly conserved across geography and distinct chemical and microbial environments in the Taupō Volcanic Zone, New Zealand" 
by Kevin Lee et al.

This manucript is published in Applied and Environmental Microbiology and is available at:

http://aem.asm.org/content/early/2016/04/04/AEM.00139-16.full.pdf

Community data supporting this project is available at  http://www.ebi.ac.uk/ena/data/view/PRJEB13454 



The code consists of two parts: a pipeline to calculate gene coverage within strains, written and maintained by Xochitl Morgan (morganx AT gmail.com ) and a pipeline to calculate the distribution of operonic genes across different species, written and maintained by Kevin Lee (zephirum AT gmail.com)  
##################################################################

The gene coverage pipeline consists of the following steps:

1. make_protein_bam.sh 
This shell script creates bowtie2 indices for each strain, then  uses bowtie2 to align reads 
for each strain, in each genome. The inputs are nucleotide fasta files for genes,
and fastq files for reads.

The fastq files are not included in the bitbucket repository, but are available
for download at https://drive.google.com/folderview?id=0BxCxomZqt5ykbGF6MnVEbS1rc2s&usp=sharing

You will need to create a subdirectory called "bams" in the folder "Chthonomonas" and put the fastq files there. 

How to run:

sh make_protein_bam.sh


2. feature_bed.pl

This perl script generates a bed file for each strain,  in which the features are the 
strain's genes. The inputs are the nucleotide fasta files for the strain, and the
outputs are a bed file for each strain. 

How to run: 

perl feature_bed.pl

3. parse-protein-bams.sh
This step compiles the per-position coverage for each gene, then pipes the output through
the parse_coverage script, which calculates the median and standard deviation per gene. 
The inputs are the bam files created in step 1, and bed files created in step 2. The outputs
 are one file per genome (strain.cov), summarizing the per-gene median and standard deviation coverage.
 
 How to run:
 
 sh parse-protein-bams.sh

4. collate_coverage.pl
This reformats the four output files produced in step 3 into an Excel-friendly table.

How to run:

perl collate_coverage.pl > table

5. index.pl
This attaches a strain label to each gene identifier the table produced in step 4, so
it is easier to tell which gene belongs to which strain. 

How to run:

perl index.pl table > indexed-table


6. do_uclust.sh
This shell script makes the annotated genes into 95% identity clusters with uclust.

How to run:
Make sure that all.fna.gz (available in Downloads) is downloaded and in the same directory
sh do_uclust.sh


Note: You will almost certainly have to edit this shell script to match your version of usearch

7. parse_uparse.pl

This perl script simplifies and filters each gene as present / absent in each genome based on whether it met the IQR-based threshold. It also combines the filtered output with the uclust gene clusters, producing a table that shows both which highly similar genes were annotated in each genome, and in which genomes these are well-supported by read coverage.

How to run:

perl parse_uparse.pl indexed-table > last_table

Note: there is a bug in index.pl such that three of the genes don't get properly indexed. I fixed those three lines manually to make it run.

8. summary.sh
This file compiles summary statistics (e.g. for generation of tables S11 and S12) and prints to stdout

How to run:
sh summary.sh last_table

Prerequisites:

Bowtie2, bedtools, samtools, usearch, perl Math::NumberCruncher


##################################
The operon pipeline calculates the distribution of operons within genomes. It consists of the following: 

1. operon.py: Calculates Euclidean gene distances of a group of genes, such as genes involved in a pathway, within a genome.
The script can handle multiple homologous groups (named "operons" here) within multiple genomes provided in a single dataset file.

#date            :20160112
#version         :0.2
#usage           :python operon.py
#python_version  :3.4.1  

This reads in the file "dataset.txt" (which is in the same local directory) and writes the output file "distance_output.txt".

2. dataset.txt 
To generate input file ("dataset.txt"):
    The script takes Gene Cart tables exported from JGI's Integrated Microbial Genome database (https://img.jgi.doe.gov/).
        1. Place orthologous genes among different genomes within the gene cart.
        2. In gene cart menu, select "Start Coord", "End Coord", "Strand", and "Scaffold Length".
        3. Export the gene cart table data using the Export button below the table.
        4. Append a tabbed delimited column at the end of the table naming the gene (e.g. TrpA)
        5. Repeat the above process and collect orthologous genes within a pathway, and append another column naming the pathway (e.g. Tryptophan)
           within all the relevant files.
        6. Remove the header of each file and merge all files into a single file named "dataset.txt" within the working path of this script.
        7. The script can calculate arbitrary number of genes within arbitrary number of pathways within arbitrary number of genomes, given the
           consistent identifiers in the columns (genome name, gene name, and pathway name).
        
Note:
    1. Only distances between genes within a single contiguous chromosome is calculated. Comparing genes on separate
       chromosomes/plasmids will not make sense and will likely result in an error.
    2. Strandiness is only considered for calculating the ORF positions of the genes to be compared.
    
Calculation of Euclidean distances between genes:
    As the vast majority of prokaryotic chromosomes are circular, the geometry meant that there are two paths along the DNA molecule between any 
    two genes. This script outputs the shorter path.